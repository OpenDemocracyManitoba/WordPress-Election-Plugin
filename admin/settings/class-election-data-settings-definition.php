<?php
/**
 *
 *
 * @link       http://opendemocracymanitoba.ca/
 * @since      1.0.0
 *
 * @package    Election_Data
 * @subpackage Election_Data/includes
 */

/**
 * The Settings definition of the plugin.
 *
 *
 * @package    Election_Data
 * @subpackage Election_Data/includes
 * @author     Your Name <email@example.com>
 */
class Election_Data_Settings_Definition {

	// @TODO: change plugin-name
	public static $plugin_name = 'election-data';

	/**
	 * [apply_tab_slug_filters description]
	 *
	 * @param  array $default_settings [description]
	 *
	 * @return array                   [description]
	 */
	static private function apply_tab_slug_filters( $default_settings ) {

		$extended_settings[] = array();
		$extended_tabs       = self::get_tabs();

		foreach ( $extended_tabs as $tab_slug => $tab_desc ) {

			$options = isset( $default_settings[ $tab_slug ] ) ? $default_settings[ $tab_slug ] : array();

			$extended_settings[ $tab_slug ] = apply_filters( 'election_data_settings_' . $tab_slug, $options );
		}

		return $extended_settings;
	}

	/**
	 * [get_default_tab_slug description]
	 * @return [type] [description]
	 */
	static public function get_default_tab_slug() {

		return key( self::get_tabs() );
	}

	/**
	 * Retrieve settings tabs
	 *
	 * @since    1.0.0
	 * @return    array    $tabs    Settings tabs
	 */
	static public function get_tabs() {

		$tabs                = array();
		$tabs['import_tab'] = __( 'Import', self::$plugin_name );
		$tabs['export_tab'] = __( 'Export', self::$plugin_name );
		$tabs['news_scraping_tab'] = __( 'News Scraping', self::$plugin_name );
		$tabs['front_page_tab'] = __( 'Front Page', self::$plugin_name );
		//$tabs['second_tab']  = __( 'Second Tab', self::$plugin_name );

		return apply_filters( 'election_data_settings_tabs', $tabs );
	}

	/**
	 * 'Whitelisted' Election_Data settings, filters are provided for each settings
	 * section to allow extensions and other plugins to add their own settings
	 *
	 *
	 * @since    1.0.0
	 * @return    mixed    $value    Value saved / $default if key if not exist
	 */
	static public function get_settings() {

		$settings[] = array();

		$settings = array(
			'import_tab' => array (
				'import' => array(
					'name' => __( 'Import Data', self::$plugin_name ),
					'desc' => __( 'Import the contents of CSV or XML file into the site.', self::$plugin_name ),
					'type' => 'import',
					'options' => array(
						'id' => 'ed_import',
						'formats' => array(
							'xml' => 'XML file',
							'csv_zip' => 'Zip file generated by a previous export',
							'csv_party' => 'CSV file containing parties',
							'csv_constituency' => 'CSV file containing constituencies',
							'csv_candidate' => 'CSV file containing candidates',
							'csv_news_source' => 'CSV file containing news sources',
							'csv_news_article' => 'CSV file containing news articles',
							'csv_news_mention' => 'CSV file containing news_mentions',
						),
						'required_modules' => array(
							'xml' => array( 'xmlreader' ),
							'csv_zip' => array( 'zip' ),
						),
						'default' => 'xml',
					),
					'no_value' => true,
				),
				'clear' => array(
					'desc' => __( 'Removes all Election Data content from the site. Warning: This <strong>cannot</strong> be undone.' ),
					'type' => 'button',
					'options' => array(
						'id' => 'button_erase_site',
						'label' => __( 'Erase Site', self::$plugin_name ),
					),
					'no_value' => true,
				),
			),
			'export_tab' => array(
				'export' => array(
					'name' => __( 'Export Data', self::$plugin_name ),
					'desc' => __( 'Export the sote content to CSV or XML files suitable for importing on another installation.', self::$plugin_name ),
					'type' => 'export',
					'options' => array(
						'id' => 'ed_export',
						'formats' => array(
							'xml' => 'XML file (A single XML file conatining all of the site data.)',
							'csv_zip' => 'Zip file (Multiple CSV files stored in a zip file.)',
							'csv_party' => 'CSV file containing parties',
							'csv_constituency' => 'CSV file containing constituencies',
							'csv_candidate' => 'CSV file containing candidates',
							'csv_news_source' => 'CSV file containing news sources',
							'csv_news_article' => 'CSV file containing news articles',
							'csv_news_mention' => 'CSV file containing news mentions', 
						),
						'required_modules' => array(
							'xml' => array( 'xmlwriter' ),
							'csv_zip' => array( 'zip' ),
						),
						'default' => 'xml',
					),
					'no_value' => true,
				),
			),
			'news_scraping_tab' => array(
/*				'default_tab_settings'       => array(
					'name' => '<strong>' . __( 'Header', self::$plugin_name ) . '</strong>',
					'type' => 'header'
				),*/
				'location' => array(
					'name' => __( 'Location', self::$plugin_name ),
					'desc' => __( 'The location of the election.', self::$plugin_name ),
					'type' => 'text'
				),
				'time' => array(
					'name' => __( 'Scrape Time', self::$plugin_name ),
					'desc' => __( 'The time of the initial scrape. ie. 2am CDT', self::$plugin_name ),
					'type' => 'text',
					'std' => '2am'
				),
				'frequency' => array(
					'name' => __( 'Frequency', self::$plugin_name ),
					'desc' => __( 'The frequency of the scraping.', self::$plugin_name ),
					'options' => array(
						'daily' => __( 'Once every 24 hours', self::$plugin_name ),
						'twicedaily' => __( 'Once every 12 hours', self::$plugin_name ),
					),
					'type' => 'select',
					'std' => 'daily'
				),
				'scrape' => array(
					'desc' => __( 'Manually perform the scraping of news articles.', self::$plugin_name ),
					'type' => 'button',
					'options' => array(
						'id' => 'button_scrape_news',
						'label' => __( 'Scrape News', self::$plugin_name ),
					),
					'no_value' => true,
				),
			),
			'front_page_tab' => array(
				'summary' => array(
					'name' => __( 'Summary', self::$plugin_name ),
					'desc' => __( 'A summary that will appear on the front page of the site. Can include links to important sites, election dates, etc.', self::$plugin_name ),
					'type' => 'rich_editor',
				),
				'facebook-page' => array(
					'name' => __( 'Facebook page', self::$plugin_name ),
					'desc' => __( 'A facebook page that you would like featured on the front-page.', self::$plugin_name ),
					'type' => 'text',
				),
				'twitter' => array(
					'name' => __( 'Twitter Account', self::$plugin_name ),
					'desc' => __( 'A twitter account you would like featured on the front page'. self::$plugin_name ),
					'type' => 'text',
				),
				'google-plus-one' => array(
					'name' => __( 'Google Plus One', self::$plugin_name ),
					'desc' => __( 'Check if you would like a Google +1 button.', self::$plugin_name ),
					'type' => 'checkbox',
					'std' => true,
				),
				'constituency-label' => array(
					'name' => __( 'Constiuency Label', self::$plugin_name ),
					'desc' => __( 'The label you would like to use for the constituency section.', self::$plugin_name ),
					'type' => 'text',
				),
				'constituency-subtext' => array(
					'name' => __( 'Constituency Description', self::$plugin_name ),
					'desc' => __( 'An optional description for the constituency section.', self::$plugin_name ),
					'type' => 'text',
				),
				'party-label' => array(
					'name' => __( 'Party Label', self::$plugin_name ),
					'desc' => __( 'The label you would like to use for the party section.', self::$plugin_name ),
					'type' => 'text',
				),
				'party-subtext' => array(
					'name' => __( 'Party Description', self::$plugin_name ),
					'desc' => __( 'An optional description for the party section.', self::$plugin_name ),
					'type' => 'text',
				),
				'news-count' => array(
					'name' => __( 'News Articles', self::$plugin_name ),
					'desc' => __( 'The number of news articles to display on the front-page.', self::$plugin_name ),
					'type' => 'number',
					'min' => 0,
					'step' => 5,
				),
			),
			/*'xxx' => array(
				'missing_callback'           => array(
					'name' => '<strong>' . __( 'Missing Callback', self::$plugin_name ) . '</strong>',
					'type' => 'non-exisit'
				),
				'checkbox'                   => array(
					'name' => __( 'Checkbox', self::$plugin_name ),
					'desc' => __( 'Checkbox', self::$plugin_name ),
					'type' => 'checkbox'
				),
				'multicheck'                 => array(
					'name'    => __( 'Multicheck', self::$plugin_name ),
					'desc'    => __( 'Multicheck with 3 options', self::$plugin_name ),
					'options' => array(
						'wp-human'   => __( "I read the <a href='https://wphuman.com/blog/'>WP Human Blog</a>", self::$plugin_name ),
						'tang-rufus' => __( "<a href='http://tangrufus.com/'>Tang Rufus' Blog</a> looks great", self::$plugin_name ),
						'Filter'     => __( 'You can apply filters on this option!', self::$plugin_name )
					),
					'type'    => 'multicheck'
				),
				'multicheck_without_options' => array(
					'name' => __( 'Multicheck', self::$plugin_name ),
					'desc' => __( 'Multicheck without options', self::$plugin_name ),
					'type' => 'multicheck'
				),
				'radio'                      => array(
					'name'    => __( 'Radio', self::$plugin_name ),
					'desc'    => __( 'Radio with 3 options', self::$plugin_name ),
					'options' => array(
						'wp-human'   => __( "I read the <a href='https://wphuman.com/blog/'>WP Human Blog</a>", self::$plugin_name ),
						'tang-rufus' => __( "<a href='http://tangrufus.com/'>Tang Rufus' Blog</a> looks great", self::$plugin_name ),
						'Filter'     => __( 'You can apply filters on this option!', self::$plugin_name )
					),
					'type'    => 'radio'
				),
				'radio_without_options'      => array(
					'name' => __( 'Radio', self::$plugin_name ),
					'desc' => __( 'Radio without options', self::$plugin_name ),
					'type' => 'radio'
				),
				'text'                       => array(
					'name' => __( 'Text', self::$plugin_name ),
					'desc' => __( 'Text', self::$plugin_name ),
					'type' => 'text'
				),
				'text_with_std'              => array(
					'name' => __( 'Text with std', self::$plugin_name ),
					'desc' => __( 'Text with std', self::$plugin_name ),
					'std'  => __( 'std will be saved!', self::$plugin_name ),
					'type' => 'text'
				),
				'email'                      => array(
					'name' => __( 'Email', self::$plugin_name ),
					'desc' => __( 'Email', self::$plugin_name ),
					'type' => 'email'
				),
				'url'                        => array(
					'name' => __( 'URL', self::$plugin_name ),
					'desc' => __( 'By default, only http & https are allowed', self::$plugin_name ),
					'type' => 'url'
				),
				'password'                   => array(
					'name' => __( 'Password', self::$plugin_name ),
					'desc' => __( 'Password', self::$plugin_name ),
					'type' => 'password'
				),
				'number'                     => array(
					'name' => __( 'Number', self::$plugin_name ),
					'desc' => __( 'Number', self::$plugin_name ),
					'type' => 'number'
				),
				'number_with_attributes'     => array(
					'name' => __( 'Number', self::$plugin_name ),
					'desc' => __( 'Max: 1000, Min: 20, Step: 30', self::$plugin_name ),
					'max'  => 1000,
					'min'  => 20,
					'step' => 30,
					'type' => 'number'
				),
				'textarea'                   => array(
					'name' => __( 'Textarea', self::$plugin_name ),
					'desc' => __( 'Textarea', self::$plugin_name ),
					'type' => 'textarea'
				),
				'textarea_with_std'          => array(
					'name' => __( 'Textarea with std', self::$plugin_name ),
					'desc' => __( 'Textarea with std', self::$plugin_name ),
					'std'  => __( 'std will be saved!', self::$plugin_name ),
					'type' => 'textarea'
				),
				'select'                     => array(
					'name'    => __( 'Select', self::$plugin_name ),
					'desc'    => __( 'Select with 3 options', self::$plugin_name ),
					'options' => array(
						'wp-human'   => __( "I read the <a href='https://wphuman.com/blog/'>WP Human Blog</a>", self::$plugin_name ),
						'tang-rufus' => __( "<a href='http://tangrufus.com/'>Tang Rufus' Blog</a> looks great", self::$plugin_name ),
						'Filter'     => __( 'You can apply filters on this option!', self::$plugin_name )
					),
					'type'    => 'select'
				),
				'rich_editor'                => array(
					'name' => __( 'Rich Editor', self::$plugin_name ),
					'desc' => __( 'Rich Editor save as HTML markups', self::$plugin_name ),
					'type' => 'rich_editor'
				),
			),*/
			/*'second_tab'  => array(
				'extend_me' => array(
					'name' => 'Extend me',
					'desc' => __( 'You can extend me via hooks and filters.', self::$plugin_name ),
					'type' => 'text'
				)
			)*/
		);

		return self::apply_tab_slug_filters( $settings );
	}
}
